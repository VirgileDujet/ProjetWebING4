{"ast":null,"code":"var express = require('express'); // Lodash utils library\n\n\nvar _ = require('lodash');\n\nvar router = express.Router(); // Create RAW data array\n\nvar artistes = [{\n  nom: \"Arthur\",\n  id: \"0\"\n}];\n/* GET artistes listing. */\n\nrouter.get('/', function (req, res) {\n  // Get List of artiste and return JSON\n  res.status(200).json({\n    artistes: artistes\n  });\n});\n/* GET one artiste. */\n\nrouter.get('/:id', function (req, res) {\n  var id = req.params.id; // Find artiste in DB\n\n  var artiste = _.find(artistes, [\"id\", id]); // Return artiste\n\n\n  res.status(200).json({\n    message: 'artiste found!',\n    artiste: artiste\n  });\n});\n/* PUT new artiste. */\n\nrouter.put('/', function (req, res) {\n  // Get the data from request from request\n  var artiste = req.body.artiste; // Create new unique id\n\n  var id = _.uniqueId(); // Insert it in array (normaly with connect the data with the database)\n\n\n  artistes.push({\n    artiste: artiste,\n    id: id\n  }); // Return message\n\n  res.json({\n    message: \"Just added \".concat(id),\n    artiste: {\n      artiste: artiste,\n      id: id\n    }\n  });\n});\n/* DELETE artiste. */\n\nrouter.delete('/:id', function (req, res) {\n  // Get the :id of the artiste we want to delete from the params of the request\n  var id = req.params.id; // Remove from \"DB\"\n\n  _.remove(artistes, [\"id\", id]); // Return message\n\n\n  res.json({\n    message: \"Just removed \".concat(id)\n  });\n});\n/* UPDATE artiste. */\n\nrouter.post('/:id', function (req, res) {\n  // Get the :id of the artiste we want to update from the params of the request\n  var id = req.params.id; // Get the new data of the artiste we want to update from the body of the request\n\n  var artiste = req.body.artiste; // Find in DB\n\n  var artisteToUpdate = _.find(artistes, [\"id\", id]); // Update data with new data (js is by address)\n\n\n  artisteToUpdate.artiste = artiste; // Return message\n\n  res.json({\n    message: \"Just updated \".concat(id, \" with \").concat(artiste)\n  });\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:\\Users\\session utlisateur\\Desktop\\ING4\\Web\\TechnosWebTP1\\Nouveau dossier\\ProjetWebING4\\projet\\src\\routes\\artiste.js"],"names":["express","require","_","router","Router","artistes","nom","id","get","req","res","status","json","params","artiste","find","message","put","body","uniqueId","push","delete","remove","post","artisteToUpdate","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\n// Lodash utils library\r\nconst _ = require('lodash');\r\n\r\nconst router = express.Router();\r\n\r\n// Create RAW data array\r\nlet artistes = [{\r\n  nom: \"Arthur\",\r\n  id: \"0\"\r\n}];\r\n\r\n/* GET artistes listing. */\r\nrouter.get('/', (req, res) => {\r\n  // Get List of artiste and return JSON\r\n  res.status(200).json({ artistes });\r\n});\r\n\r\n/* GET one artiste. */\r\nrouter.get('/:id', (req, res) => {\r\n  const { id } = req.params;\r\n  // Find artiste in DB\r\n  const artiste = _.find(artistes, [\"id\", id]);\r\n  // Return artiste\r\n  res.status(200).json({\r\n    message: 'artiste found!',\r\n    artiste\r\n  });\r\n});\r\n\r\n/* PUT new artiste. */\r\nrouter.put('/', (req, res) => {\r\n  // Get the data from request from request\r\n  const { artiste } = req.body;\r\n  // Create new unique id\r\n  const id = _.uniqueId();\r\n  // Insert it in array (normaly with connect the data with the database)\r\n  artistes.push({ artiste, id });\r\n  // Return message\r\n  res.json({\r\n    message: `Just added ${id}`,\r\n    artiste: { artiste, id }\r\n  });\r\n});\r\n\r\n/* DELETE artiste. */\r\nrouter.delete('/:id', (req, res) => {\r\n  // Get the :id of the artiste we want to delete from the params of the request\r\n  const { id } = req.params;\r\n\r\n  // Remove from \"DB\"\r\n  _.remove(artistes, [\"id\", id]);\r\n\r\n  // Return message\r\n  res.json({\r\n    message: `Just removed ${id}`\r\n  });\r\n});\r\n\r\n/* UPDATE artiste. */\r\nrouter.post('/:id', (req, res) => {\r\n  // Get the :id of the artiste we want to update from the params of the request\r\n  const { id } = req.params;\r\n  // Get the new data of the artiste we want to update from the body of the request\r\n  const { artiste } = req.body;\r\n  // Find in DB\r\n  const artisteToUpdate = _.find(artistes, [\"id\", id]);\r\n  // Update data with new data (js is by address)\r\n  artisteToUpdate.artiste = artiste;\r\n\r\n  // Return message\r\n  res.json({\r\n    message: `Just updated ${id} with ${artiste}`\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n"]},"metadata":{},"sourceType":"module"}